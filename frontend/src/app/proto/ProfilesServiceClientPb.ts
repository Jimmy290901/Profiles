/**
 * @fileoverview gRPC-Web generated client stub for profiles
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.20.1
// source: profiles.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as profiles_pb from './profiles_pb';


export class ProfileServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorLogin = new grpcWeb.MethodDescriptor(
    '/profiles.ProfileService/Login',
    grpcWeb.MethodType.UNARY,
    profiles_pb.Credentials,
    profiles_pb.UserData,
    (request: profiles_pb.Credentials) => {
      return request.serializeBinary();
    },
    profiles_pb.UserData.deserializeBinary
  );

  login(
    request: profiles_pb.Credentials,
    metadata: grpcWeb.Metadata | null): Promise<profiles_pb.UserData>;

  login(
    request: profiles_pb.Credentials,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: profiles_pb.UserData) => void): grpcWeb.ClientReadableStream<profiles_pb.UserData>;

  login(
    request: profiles_pb.Credentials,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: profiles_pb.UserData) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/profiles.ProfileService/Login',
        request,
        metadata || {},
        this.methodDescriptorLogin,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/profiles.ProfileService/Login',
    request,
    metadata || {},
    this.methodDescriptorLogin);
  }

  methodDescriptorSignup = new grpcWeb.MethodDescriptor(
    '/profiles.ProfileService/Signup',
    grpcWeb.MethodType.UNARY,
    profiles_pb.UserData,
    profiles_pb.UserData,
    (request: profiles_pb.UserData) => {
      return request.serializeBinary();
    },
    profiles_pb.UserData.deserializeBinary
  );

  signup(
    request: profiles_pb.UserData,
    metadata: grpcWeb.Metadata | null): Promise<profiles_pb.UserData>;

  signup(
    request: profiles_pb.UserData,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: profiles_pb.UserData) => void): grpcWeb.ClientReadableStream<profiles_pb.UserData>;

  signup(
    request: profiles_pb.UserData,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: profiles_pb.UserData) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/profiles.ProfileService/Signup',
        request,
        metadata || {},
        this.methodDescriptorSignup,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/profiles.ProfileService/Signup',
    request,
    metadata || {},
    this.methodDescriptorSignup);
  }

  methodDescriptorUpdateProfile = new grpcWeb.MethodDescriptor(
    '/profiles.ProfileService/UpdateProfile',
    grpcWeb.MethodType.UNARY,
    profiles_pb.UserData,
    profiles_pb.UserData,
    (request: profiles_pb.UserData) => {
      return request.serializeBinary();
    },
    profiles_pb.UserData.deserializeBinary
  );

  updateProfile(
    request: profiles_pb.UserData,
    metadata: grpcWeb.Metadata | null): Promise<profiles_pb.UserData>;

  updateProfile(
    request: profiles_pb.UserData,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: profiles_pb.UserData) => void): grpcWeb.ClientReadableStream<profiles_pb.UserData>;

  updateProfile(
    request: profiles_pb.UserData,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: profiles_pb.UserData) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/profiles.ProfileService/UpdateProfile',
        request,
        metadata || {},
        this.methodDescriptorUpdateProfile,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/profiles.ProfileService/UpdateProfile',
    request,
    metadata || {},
    this.methodDescriptorUpdateProfile);
  }

  methodDescriptorUsernameExists = new grpcWeb.MethodDescriptor(
    '/profiles.ProfileService/UsernameExists',
    grpcWeb.MethodType.UNARY,
    profiles_pb.UsernameRequest,
    profiles_pb.ExistsResponse,
    (request: profiles_pb.UsernameRequest) => {
      return request.serializeBinary();
    },
    profiles_pb.ExistsResponse.deserializeBinary
  );

  usernameExists(
    request: profiles_pb.UsernameRequest,
    metadata: grpcWeb.Metadata | null): Promise<profiles_pb.ExistsResponse>;

  usernameExists(
    request: profiles_pb.UsernameRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: profiles_pb.ExistsResponse) => void): grpcWeb.ClientReadableStream<profiles_pb.ExistsResponse>;

  usernameExists(
    request: profiles_pb.UsernameRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: profiles_pb.ExistsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/profiles.ProfileService/UsernameExists',
        request,
        metadata || {},
        this.methodDescriptorUsernameExists,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/profiles.ProfileService/UsernameExists',
    request,
    metadata || {},
    this.methodDescriptorUsernameExists);
  }

}

