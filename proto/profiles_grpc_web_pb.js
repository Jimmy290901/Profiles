/**
 * @fileoverview gRPC-Web generated client stub for profiles
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.20.1
// source: profiles.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.profiles = require('./profiles_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.profiles.ProfileServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.profiles.ProfileServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.profiles.Credentials,
 *   !proto.profiles.UserData>}
 */
const methodDescriptor_ProfileService_Login = new grpc.web.MethodDescriptor(
  '/profiles.ProfileService/Login',
  grpc.web.MethodType.UNARY,
  proto.profiles.Credentials,
  proto.profiles.UserData,
  /**
   * @param {!proto.profiles.Credentials} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.profiles.UserData.deserializeBinary
);


/**
 * @param {!proto.profiles.Credentials} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.profiles.UserData)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.profiles.UserData>|undefined}
 *     The XHR Node Readable Stream
 */
proto.profiles.ProfileServiceClient.prototype.login =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/profiles.ProfileService/Login',
      request,
      metadata || {},
      methodDescriptor_ProfileService_Login,
      callback);
};


/**
 * @param {!proto.profiles.Credentials} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.profiles.UserData>}
 *     Promise that resolves to the response
 */
proto.profiles.ProfileServicePromiseClient.prototype.login =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/profiles.ProfileService/Login',
      request,
      metadata || {},
      methodDescriptor_ProfileService_Login);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.profiles.UserData,
 *   !proto.profiles.UserData>}
 */
const methodDescriptor_ProfileService_Signup = new grpc.web.MethodDescriptor(
  '/profiles.ProfileService/Signup',
  grpc.web.MethodType.UNARY,
  proto.profiles.UserData,
  proto.profiles.UserData,
  /**
   * @param {!proto.profiles.UserData} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.profiles.UserData.deserializeBinary
);


/**
 * @param {!proto.profiles.UserData} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.profiles.UserData)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.profiles.UserData>|undefined}
 *     The XHR Node Readable Stream
 */
proto.profiles.ProfileServiceClient.prototype.signup =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/profiles.ProfileService/Signup',
      request,
      metadata || {},
      methodDescriptor_ProfileService_Signup,
      callback);
};


/**
 * @param {!proto.profiles.UserData} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.profiles.UserData>}
 *     Promise that resolves to the response
 */
proto.profiles.ProfileServicePromiseClient.prototype.signup =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/profiles.ProfileService/Signup',
      request,
      metadata || {},
      methodDescriptor_ProfileService_Signup);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.profiles.UserData,
 *   !proto.profiles.UserData>}
 */
const methodDescriptor_ProfileService_UpdateProfile = new grpc.web.MethodDescriptor(
  '/profiles.ProfileService/UpdateProfile',
  grpc.web.MethodType.UNARY,
  proto.profiles.UserData,
  proto.profiles.UserData,
  /**
   * @param {!proto.profiles.UserData} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.profiles.UserData.deserializeBinary
);


/**
 * @param {!proto.profiles.UserData} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.profiles.UserData)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.profiles.UserData>|undefined}
 *     The XHR Node Readable Stream
 */
proto.profiles.ProfileServiceClient.prototype.updateProfile =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/profiles.ProfileService/UpdateProfile',
      request,
      metadata || {},
      methodDescriptor_ProfileService_UpdateProfile,
      callback);
};


/**
 * @param {!proto.profiles.UserData} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.profiles.UserData>}
 *     Promise that resolves to the response
 */
proto.profiles.ProfileServicePromiseClient.prototype.updateProfile =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/profiles.ProfileService/UpdateProfile',
      request,
      metadata || {},
      methodDescriptor_ProfileService_UpdateProfile);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.profiles.UsernameRequest,
 *   !proto.profiles.ExistsResponse>}
 */
const methodDescriptor_ProfileService_UsernameExists = new grpc.web.MethodDescriptor(
  '/profiles.ProfileService/UsernameExists',
  grpc.web.MethodType.UNARY,
  proto.profiles.UsernameRequest,
  proto.profiles.ExistsResponse,
  /**
   * @param {!proto.profiles.UsernameRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.profiles.ExistsResponse.deserializeBinary
);


/**
 * @param {!proto.profiles.UsernameRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.profiles.ExistsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.profiles.ExistsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.profiles.ProfileServiceClient.prototype.usernameExists =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/profiles.ProfileService/UsernameExists',
      request,
      metadata || {},
      methodDescriptor_ProfileService_UsernameExists,
      callback);
};


/**
 * @param {!proto.profiles.UsernameRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.profiles.ExistsResponse>}
 *     Promise that resolves to the response
 */
proto.profiles.ProfileServicePromiseClient.prototype.usernameExists =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/profiles.ProfileService/UsernameExists',
      request,
      metadata || {},
      methodDescriptor_ProfileService_UsernameExists);
};


module.exports = proto.profiles;

